#pragma once

#ifndef _PDS_V4_H
#define _PDS_V4_H

/*--------------------------------------------------------------------------
 *	V4.h Declarations for 1x4 vector class
 *------------------------------------------------------------------------*/

#include <math.h>
#include "Typedefs.h"

typedef real8 V4[4];

//-----------------------------------------------------------------------------------------------
// various support macros for vector/matrix support...
//-----------------------------------------------------------------------------------------------

#define V4_SET(a,x,y,z,w)  { (a)[0]=(x); (a)[1]=(y); (a)[2]=(z); (a)[3]=(w); }
#define V4_ZERO(a)         { (a)[0]=0.0; (a)[1]=0.0; (a)[2]=0.0; (a)[3]=1.0; }
#define V4_ONE(a)          { (a)[0]=1.0; (a)[1]=1.0; (a)[2]=1.0; (a)[3]=1.0; }
#define V4_PI(a)           { (a)[0]=M_PI; (a)[1]=M_PI; (a)[2]=M_PI; (a)[3]=M_PI; }

#define V3_FROM_SCALAR(v,x,y,z,w) { (v)[0]=(x); \
                                    (v)[1]=(y); \
                                    (v)[2]=(z); \
                                    (v)[3]=(w); }

#define V3_TO_SCALAR(x,y,z,w,v)   { (x)=(v)[0]; \
                                    (y)=(v)[1]; \
                                    (z)=(v)[2]; \
                                    (w)=(v)[3]; }

#define V4_COPY(a,b)       { (a)[0]=(b)[0]; (a)[1]=(b)[1]; (a)[2]=(b)[2]; (a)[3]=(b)[3]; }

#define V4_ADD(a,b,c)      { (a)[0]=((b)[0]+(c)[0]); \
                             (a)[1]=((b)[1]+(c)[1]); \
                             (a)[2]=((b)[2]+(c)[2]); \
                             (a)[3]=((b)[3]+(c)[3]); }

#define V4_ADD_VS(a,b,s)   { (a)[0]=((b)[0]+(s)); \
                             (a)[1]=((b)[1]+(s)); \
                             (a)[2]=((b)[2]+(s)); \
                             (a)[3]=((b)[3]+(s)); }

#define V4_ADD_SV(a,s,b)   { (a)[0]=((s)+(b)[0]); \
                             (a)[1]=((s)+(b)[1]); \
                             (a)[2]=((s)+(b)[2]); \
                             (a)[3]=((s)+(b)[3]); }

#define V4_SUB(a,b,c)      { (a)[0]=((b)[0]-(c)[0]); \
                             (a)[1]=((b)[1]-(c)[1]); \
                             (a)[2]=((b)[2]-(c)[2]); \
                             (a)[3]=((b)[3]-(c)[3]); }

#define V4_SUB_VS(a,b,s)   { (a)[0]=((b)[0]-(s)); \
                             (a)[1]=((b)[1]-(s)); \
                             (a)[2]=((b)[2]-(s)); \
                             (a)[3]=((b)[3]-(s)); }

#define V4_SUB_SV(a,s,b)   { (a)[0]=((s)-(b)[0]); \
                             (a)[1]=((s)-(b)[1]); \
                             (a)[2]=((s)-(b)[2]); \
                             (a)[3]=((s)-(b)[3]); }

#define V4_MUL(a,b,c)      { (a)[0]=((b)[0]*(c)[0]); \
                             (a)[1]=((b)[1]*(c)[1]); \
                             (a)[2]=((b)[2]*(c)[2]); \
                             (a)[3]=((b)[3]*(c)[3]); }

#define V4_MUL_VS(a,b,s)   { (a)[0]=((b)[0]*(s)); \
                             (a)[1]=((b)[1]*(s)); \
                             (a)[2]=((b)[2]*(s)); \
                             (a)[3]=((b)[3]*(s)); }

#define V4_MUL_SV(a,s,b)   { (a)[0]=((s)*(b)[0]); \
                             (a)[1]=((s)*(b)[1]); \
                             (a)[2]=((s)*(b)[2]); \
                             (a)[3]=((s)*(b)[3]); }

#define V4_HSUM(a)              ( ((a)[0]+(a)[1]+(a)[2]+(a)[3] )

#define V4_DOT(a,b)             ( ((a)[0]*(b)[0]) + ((a)[1]*(b)[1]) + ((a)[2]*(b)[2]) + ((a)[3]*(b)[3]) ) 

#define V4_MAG(a)           sqrt( ((a)[0]*(a)[0]) + ((a)[1]*(a)[1]) + ((a)[2]*(a)[2]) + ((a)[3]*(a)[3]) )

#define V4_DIST(a,b)        sqrt(   (((b)[0]-(a)[0])*((b)[0]-(a)[0])) \
                                  + (((b)[1]-(a)[1])*((b)[1]-(a)[1])) \
                                  + (((b)[2]-(a)[2])*((b)[2]-(a)[2])) \
                                  + (((b)[3]-(a)[3])*((b)[3]-(a)[3])) )

#define V4_CROSS(a,b,c)    { (a)[0]=(((b)[1]*(c)[2])-((b)[2]*(c)[1])); \
                             (a)[1]=(((b)[2]*(c)[0])-((b)[0]*(c)[2])); \
                             (a)[2]=(((b)[0]*(c)[1])-((b)[1]*(c)[0])); \
                             (a)[3]=1.0;                               }

#define V4_NEG(a,b)        { (a)[0]=(-(b)[0]); \
                             (a)[1]=(-(b)[1]); \
                             (a)[2]=(-(b)[2]); \
                             (a)[3]=(-(b)[3]); }

#define V4_ABS(a,b)        { (a)[0]=fabs((b)[0]); \
                             (a)[1]=fabs((b)[1]); \
                             (a)[2]=fabs((b)[2]); \
                             (a)[3]=fabs((b)[3]); }

#define V4_INV(a,b)        { (a)[0]=1.0/((b)[0]); \
                             (a)[1]=1.0/((b)[1]); \
                             (a)[2]=1.0/((b)[2]); \
                             (a)[3]=1.0/((b)[3]); }

#define V4_NORMALIZE(a,b)  { real8 _s = sqrt( ((b)[0]*(b)[0]) + ((b)[1]*(b)[1]) + ((b)[2]*(b)[2]) ); \
                                   _s = ( (_s>0.0) ? 1.0/_s : 0.0 ); \
                             (a)[0]=_s*(b)[0]; \
                             (a)[1]=_s*(b)[1]; \
                             (a)[2]=_s*(b)[2]; \
                             (a)[3]=_s*(b)[3]; }

#define V4_SCALE_W(a,b)    { real8 _s = ( (fabs((b)[3])>0.0) ? 1.0/(b)[3] : 0.0 ); \
                             (a)[0]=_s*(b)[0]; \
                             (a)[1]=_s*(b)[1]; \
                             (a)[2]=_s*(b)[2]; \
                             (a)[3]=1.0;       }

#define V4_UNIT_VECTOR(a,b,c) { (a)[0]=((c)[0]-(b)[0]); \
                                (a)[1]=((c)[1]-(b)[1]); \
                                (a)[2]=((c)[2]-(b)[2]); \
                                real8 _s = sqrt( ((a)[0]*(a)[0]) + ((a)[1]*(a)[1]) + ((a)[2]*(a)[2]) ); \
                                      _s = ( (_s>0.0) ? 1.0/_s : 0.0 ); \
                                (a)[0]=_s*(a)[0]; \
                                (a)[1]=_s*(a)[1]; \
                                (a)[2]=_s*(a)[2]; \
                                (a)[3]=1.0;       }

#define V4_RINT(a,b,s,l)      { (a)[0]=(rint((b)[0]*(s)[0])*l[0]); \
                                (a)[1]=(rint((b)[1]*(s)[1])*l[1]); \
                                (a)[2]=(rint((b)[2]*(s)[2])*l[2]); \
                                (a)[3]=1.0;                        }

#define V4_LOOP(a)            for (int i=0; (i<4); ++i) { a; }


//-----------------------------------------------------------------------------------------------
        
#endif
