#pragma once

#ifndef _PDS_M44_H
#define _PDS_M44_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#include "Typedefs.h"

typedef real8 M44[16];

//-----------------------------------------------------------------------------------------------
// Inline 4x4 Matrix Operations
//-----------------------------------------------------------------------------------------------
//
// Summary....
//
//    M44_SET           (m,m00,m01,m02,m03,      : m = | m00 m01 m02 m03 |
//                         m00,m01,m02,m03,            | m10 m11 m12 m13 |
//                         m00,m01,m02,m03,            | m20 m21 m22 m23 |
//                         m00,m01,m02,m03 )           | m30 m31 m32 m33 |
//
//    M44_COPY          (ma,mb)     : ma = mb
//    M44_ADD           (ma,mb,mc)  : ma = mb + mc
//    M44_ADD_MS        (ma,mb,s )  : ma = mb + s   (s=scalar)
//    M44_ADD_SM        (ma,s ,mb)  : ma = s  + mb  (s=scalar)
//    M44_SUB           (ma,mb,mc)  : ma = mb - mc
//    M44_SUB_MS        (ma,mb,s )  : ma = mb - s   (s=scalar)
//    M44_SUB_SM        (ma,s ,mb)  : ma = s  - mb  (s=scalar)
//
//    M44_IDENTITY      (m)         : m = | 1 0 0 0 |
//                                        | 0 1 0 0 |
//                                        | 0 0 1 0 |
//                                        | 0 0 0 1 |
//
//    M44_ZERO          (m)         : m = | 0 0 0 0 |
//                                        | 0 0 0 0 |
//                                        | 0 0 0 0 |
//                                        | 0 0 0 0 |
//
//    M44_ONE           (m)         : m = | 1 1 1 1 |
//                                        | 1 1 1 1 |
//                                        | 1 1 1 1 |
//                                        | 1 1 1 1 |
//
//    M44_TRANSLATE     (m,x,y,z)   : m = | 1 0 0 x |
//                                        | 0 1 0 y |
//                                        | 0 0 1 z |
//                                        | 0 0 0 1 |
//
//    M44_SCALE         (m,x,y,z)   : m = | x 0 0 0 |
//                                        | 0 y 0 0 |
//                                        | 0 0 z 0 |
//                                        | 0 0 0 1 |
//
//    M44_DIAG          (m,x,y,z)   : m = | x 0 0 0 |
//                                        | 0 y 0 0 |
//                                        | 0 0 z 0 |
//                                        | 0 0 0 1 |
//
//    M44_ROT_X      (m,rx)         : m = | 1   0        0     0 | (rx=rotation angle in radians)
//                                        | 0 cos(rx) -sin(rx) 0 |
//                                        | 0 sin(rx)  cos(rx) 0 |
//                                        | 0   0        0     1 |
//
//    M44_ROT_Y      (m,ry)         : m = |  cos(ry) 0 sin(ry) 0 | (ry=rotation angle in radians)
//                                        |    0     1   0     0 |
//                                        | -sin(ry) 0 cos(ry) 0 |
//                                        | 0   0        0     1 |
//
//    M44_ROT_Z      (m,rz)         : m = | cos(rz) -sin(rz)  0 0 | (rz=rotation angle in radians)
//                                        | sin(rz)  cos(rz)  0 0 |
//                                        |   0        0      1 0 |
//                                        |   0        0      0 1 |
//
//    M44_RIGHT_TO_LEFT (m)         : m = |  1  0  0 0 |
//                                        |  0 -1  0 0 |
//                                        |  0  0  1 0 |
//                                        |  0  0  0 1 |
//
//    M44_REFLECT_X     (m)         : m = | -1  0  0 0 |
//                                        |  0  1  0 0 |
//                                        |  0  0  1 0 |
//                                        |  0  0  0 1 |
//
//    M44_REFLECT_Y     (m)         : m = |  1  0  0 0 |
//                                        |  0 -1  0 0 |
//                                        |  0  0  1 0 |
//                                        |  0  0  0 1 |
//
//    M44_REFLECT_Z     (m)         : m = |  1  0  0 0 |
//                                        |  0  1  0 0 |
//                                        |  0  0 -1 0 |
//                                        |  0  0  0 1 |
//
//    M44_ECI_To_SGI    (m)         : m = |  1  0  0 0 |
//                                        |  0  1  0 0 |
//                                        |  0  0 -1 0 |
//                                        |  0  0  0 1 |
//
//    M44_MUL           (ma,mb,mc)  : ma = mb * mc                    (note - ma,mb,and mc must be unique)
//    M44_MUL_MS        (ma,mb, s)  : ma = mb *  s  (s=scalar)        (note - ma==mb okay)
//    M44_MUL_SM        (ma,s ,mb)  : ma = s  * mb  (s=scalar)        (note - ma==mb okay)
//    M44_TRANSPOSE     (ma,mb)     : ma = transpose(mb)              (note - ma and mb must be unique)
//    M44_NEG           (ma,mb)     : ma = -mb                        (note - ma==mb okay)
//    M44_ABS           (ma,mb)     : ma = abs(mb)                    (note - ma==mb okay)
//    M44_NORMALIZE     (ma,mb)     : ma = mb/max(mb)                 (note - ma==mb okay)
//    V3_M44_V3_MUL     (q,m,p)     : q  = m * p  (postfix multiply)  (note - p==q okay)
//    V3_V3_M44_MUL     (q,p,m)     : q  = p * m  (prefix  multiply)  (note - p==q okay)
//
//-----------------------------------------------------------------------------------------------

#define M44_SET1(m,s)                                                   \
{                                                                       \
   (m)[ 0]=(s); (m)[ 1]=(s); (m)[ 2]=(s); (m)[ 3]=(s);                  \
   (m)[ 4]=(s); (m)[ 5]=(s); (m)[ 6]=(s); (m)[ 7]=(s);                  \
   (m)[ 8]=(s); (m)[ 9]=(s); (m)[10]=(s); (m)[11]=(s);                  \
   (m)[12]=(s); (m)[13]=(s); (m)[14]=(s); (m)[15]=(s);                  \
}

//-----------------------------------------------------------------------------------------------

#define M44_SET(m,m00,m01,m02,m03,                                      \
                  m10,m11,m12,m13,                                      \
                  m20,m21,m22,m23,                                      \
                  m30,m31,m32,m33 )                                     \
{                                                                       \
   (m)[ 0]=(m00); (m)[ 1]=(m01); (m)[ 2]=(m02); (m)[ 3]=(m03);          \
   (m)[ 4]=(m10); (m)[ 5]=(m11); (m)[ 6]=(m12); (m)[ 7]=(m13);          \
   (m)[ 8]=(m20); (m)[ 9]=(m21); (m)[10]=(m22); (m)[11]=(m23);          \
   (m)[12]=(m30); (m)[13]=(m31); (m)[14]=(m32); (m)[15]=(m33);          \
}

//-----------------------------------------------------------------------------------------------

#define M44_SET_TENSOR(m,m00,m11,m22,m12,m20,m01)                       \
{                                                                       \
   (m)[ 0]=(m00); (m)[ 1]=(m01); (m)[ 2]=(m20); (m)[ 3]=(0.0);          \
   (m)[ 4]=(m01); (m)[ 5]=(m11); (m)[ 6]=(m12); (m)[ 7]=(0.0);          \
   (m)[ 8]=(m20); (m)[ 9]=(m12); (m)[10]=(m22); (m)[11]=(0.0);          \
   (m)[12]=(0.0); (m)[13]=(0.0); (m)[14]=(0.0); (m)[15]=(1.0);          \
}

//-----------------------------------------------------------------------------------------------

#define M44_COPY(q,p)                                                   \
{                                                                       \
   (q)[ 0]=(p)[ 0]; (q)[ 1]=(p)[ 1]; (q)[ 2]=(p)[ 2]; (q)[ 3]=(p)[ 3];  \
   (q)[ 4]=(p)[ 4]; (q)[ 5]=(p)[ 5]; (q)[ 6]=(p)[ 6]; (q)[ 7]=(p)[ 7];  \
   (q)[ 8]=(p)[ 8]; (q)[ 9]=(p)[ 9]; (q)[10]=(p)[10]; (q)[11]=(p)[11];  \
   (q)[12]=(p)[12]; (q)[13]=(p)[13]; (q)[14]=(p)[14]; (q)[15]=(p)[15];  \
}

//-----------------------------------------------------------------------------------------------

#define M44_ADD(a,b,c)         \
{                              \
   (a)[ 0]=((b)[ 0]+(c)[ 0]);  \
   (a)[ 1]=((b)[ 1]+(c)[ 1]);  \
   (a)[ 2]=((b)[ 2]+(c)[ 2]);  \
   (a)[ 3]=((b)[ 3]+(c)[ 3]);  \
   (a)[ 4]=((b)[ 4]+(c)[ 4]);  \
   (a)[ 5]=((b)[ 5]+(c)[ 5]);  \
   (a)[ 6]=((b)[ 6]+(c)[ 6]);  \
   (a)[ 7]=((b)[ 7]+(c)[ 7]);  \
   (a)[ 8]=((b)[ 8]+(c)[ 8]);  \
   (a)[ 9]=((b)[ 9]+(c)[ 9]);  \
   (a)[10]=((b)[10]+(c)[10]);  \
   (a)[11]=((b)[11]+(c)[11]);  \
   (a)[12]=((b)[12]+(c)[12]);  \
   (a)[13]=((b)[13]+(c)[13]);  \
   (a)[14]=((b)[14]+(c)[14]);  \
   (a)[15]=((b)[15]+(c)[15]);  \
}

//-----------------------------------------------------------------------------------------------

#define M44_ADD_MS(a,b,s)      \
{                              \
   (a)[ 0]=((b)[ 0]+(s));      \
   (a)[ 1]=((b)[ 1]+(s));      \
   (a)[ 2]=((b)[ 2]+(s));      \
   (a)[ 3]=((b)[ 3]+(s));      \
   (a)[ 4]=((b)[ 4]+(s));      \
   (a)[ 5]=((b)[ 5]+(s));      \
   (a)[ 6]=((b)[ 6]+(s));      \
   (a)[ 7]=((b)[ 7]+(s));      \
   (a)[ 8]=((b)[ 8]+(s));      \
   (a)[ 9]=((b)[ 9]+(s));      \
   (a)[10]=((b)[10]+(s));      \
   (a)[11]=((b)[11]+(s));      \
   (a)[12]=((b)[12]+(s));      \
   (a)[13]=((b)[13]+(s));      \
   (a)[14]=((b)[14]+(s));      \
   (a)[15]=((b)[15]+(s));      \
}

//-----------------------------------------------------------------------------------------------

#define M44_ADD_SM(a,s,b)      \
{                              \
   (a)[ 0]=((s)+(b)[ 0]);      \
   (a)[ 1]=((s)+(b)[ 1]);      \
   (a)[ 2]=((s)+(b)[ 2]);      \
   (a)[ 3]=((s)+(b)[ 3]);      \
   (a)[ 4]=((s)+(b)[ 4]);      \
   (a)[ 5]=((s)+(b)[ 5]);      \
   (a)[ 6]=((s)+(b)[ 6]);      \
   (a)[ 7]=((s)+(b)[ 7]);      \
   (a)[ 8]=((s)+(b)[ 8]);      \
   (a)[ 9]=((s)+(b)[ 9]);      \
   (a)[10]=((s)+(b)[10]);      \
   (a)[11]=((s)+(b)[11]);      \
   (a)[12]=((s)+(b)[12]);      \
   (a)[13]=((s)+(b)[13]);      \
   (a)[14]=((s)+(b)[14]);      \
   (a)[15]=((s)+(b)[15]);      \
}

//-----------------------------------------------------------------------------------------------

#define M44_SUB(a,b,c)         \
{                              \
   (a)[ 0]=((b)[ 0]-(c)[ 0]);  \
   (a)[ 1]=((b)[ 1]-(c)[ 1]);  \
   (a)[ 2]=((b)[ 2]-(c)[ 2]);  \
   (a)[ 3]=((b)[ 3]-(c)[ 3]);  \
   (a)[ 4]=((b)[ 4]-(c)[ 4]);  \
   (a)[ 5]=((b)[ 5]-(c)[ 5]);  \
   (a)[ 6]=((b)[ 6]-(c)[ 6]);  \
   (a)[ 7]=((b)[ 7]-(c)[ 7]);  \
   (a)[ 8]=((b)[ 8]-(c)[ 8]);  \
   (a)[ 9]=((b)[ 9]-(c)[ 9]);  \
   (a)[10]=((b)[10]-(c)[10]);  \
   (a)[11]=((b)[11]-(c)[11]);  \
   (a)[12]=((b)[12]-(c)[12]);  \
   (a)[13]=((b)[13]-(c)[13]);  \
   (a)[14]=((b)[14]-(c)[14]);  \
   (a)[15]=((b)[15]-(c)[15]);  \
}

//-----------------------------------------------------------------------------------------------

#define M44_SUB_MS(a,b,s)      \
{                              \
   (a)[ 0]=((b)[ 0]-(s));      \
   (a)[ 1]=((b)[ 1]-(s));      \
   (a)[ 2]=((b)[ 2]-(s));      \
   (a)[ 3]=((b)[ 3]-(s));      \
   (a)[ 4]=((b)[ 4]-(s));      \
   (a)[ 5]=((b)[ 5]-(s));      \
   (a)[ 6]=((b)[ 6]-(s));      \
   (a)[ 7]=((b)[ 7]-(s));      \
   (a)[ 8]=((b)[ 8]-(s));      \
   (a)[ 9]=((b)[ 9]-(s));      \
   (a)[10]=((b)[10]-(s));      \
   (a)[11]=((b)[11]-(s));      \
   (a)[12]=((b)[12]-(s));      \
   (a)[13]=((b)[13]-(s));      \
   (a)[14]=((b)[14]-(s));      \
   (a)[15]=((b)[15]-(s));      \
}

//-----------------------------------------------------------------------------------------------

#define M44_SUB_SM(a,s,b)      \
{                              \
   (a)[ 0]=((s)-(b)[ 0]);      \
   (a)[ 1]=((s)-(b)[ 1]);      \
   (a)[ 2]=((s)-(b)[ 2]);      \
   (a)[ 3]=((s)-(b)[ 3]);      \
   (a)[ 4]=((s)-(b)[ 4]);      \
   (a)[ 5]=((s)-(b)[ 5]);      \
   (a)[ 6]=((s)-(b)[ 6]);      \
   (a)[ 7]=((s)-(b)[ 7]);      \
   (a)[ 8]=((s)-(b)[ 8]);      \
   (a)[ 9]=((s)-(b)[ 9]);      \
   (a)[10]=((s)-(b)[10]);      \
   (a)[11]=((s)-(b)[11]);      \
   (a)[12]=((s)-(b)[12]);      \
   (a)[13]=((s)-(b)[13]);      \
   (a)[14]=((s)-(b)[14]);      \
   (a)[15]=((s)-(b)[15]);      \
}

//-----------------------------------------------------------------------------------------------

#define M44_DOT(a,b,c)                      \
{                                           \
   (a)  = (b)[ 0]*(c)[ 0];                  \
   (a) += (b)[ 1]*(c)[ 1];                  \
   (a) += (b)[ 2]*(c)[ 2];                  \
   (a) += (b)[ 3]*(c)[ 3];                  \
   (a) += (b)[ 4]*(c)[ 4];                  \
   (a) += (b)[ 5]*(c)[ 5];                  \
   (a) += (b)[ 6]*(c)[ 6];                  \
   (a) += (b)[ 7]*(c)[ 7];                  \
   (a) += (b)[ 8]*(c)[ 8];                  \
   (a) += (b)[ 9]*(c)[ 9];                  \
   (a)  = (b)[10]*(c)[10];                  \
   (a) += (b)[11]*(c)[11];                  \
   (a) += (b)[12]*(c)[12];                  \
   (a) += (b)[13]*(c)[13];                  \
   (a) += (b)[14]*(c)[14];                  \
   (a) += (b)[15]*(c)[15];                  \
}

//-----------------------------------------------------------------------------------------------

#define M44_IDENTITY(m)                     \
{                                           \
   M44_SET(m,1.0, 0.0, 0.0, 0.0,            \
             0.0, 1.0, 0.0, 0.0,            \
             0.0, 0.0, 1.0, 0.0,            \
             0.0, 0.0, 0.0, 1.0  );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_ZERO(m)                         \
{                                           \
   M44_SET(m,0.0, 0.0, 0.0, 0.0,            \
             0.0, 0.0, 0.0, 0.0,            \
             0.0, 0.0, 0.0, 0.0,            \
             0.0, 0.0, 0.0, 0.0  );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_ONE(m)                          \
{                                           \
   M44_SET(m,1.0, 1.0, 1.0, 1.0,            \
             1.0, 1.0, 1.0, 1.0,            \
             1.0, 1.0, 1.0, 1.0,            \
             1.0, 1.0, 1.0, 1.0  );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_PASCAL(m)                       \
{                                           \
   M44_SET(m,1.0,1.0, 1.0, 1.0,             \
             1.0,2.0, 3.0, 4.0,             \
             1.0,3.0, 6.0,10.0,             \
             1.0,4.0,10.0,20.0   );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_HILBERT(m)                       \
{                                            \
   (m)[ 0] = 1.0/(0+0+1);                    \
   (m)[ 1] = 1.0/(1+0+1);                    \
   (m)[ 2] = 1.0/(2+0+1);                    \
   (m)[ 3] = 1.0/(3+0+1);                    \
   (m)[ 4] = 1.0/(0+1+1);                    \
   (m)[ 5] = 1.0/(1+1+1);                    \
   (m)[ 6] = 1.0/(2+1+1);                    \
   (m)[ 7] = 1.0/(3+1+1);                    \
   (m)[ 8] = 1.0/(0+2+1);                    \
   (m)[ 9] = 1.0/(1+2+1);                    \
   (m)[10] = 1.0/(2+2+1);                    \
   (m)[11] = 1.0/(3+2+1);                    \
   (m)[12] = 1.0/(0+3+1);                    \
   (m)[13] = 1.0/(1+3+1);                    \
   (m)[14] = 1.0/(2+3+1);                    \
   (m)[15] = 1.0/(3+3+1);                    \
}

//-----------------------------------------------------------------------------------------------

#define M44_RAND(m,min,max)                     \
{                                               \
   real8  s = ((real8)((max)-(min)))/RAND_MAX;  \
                                                \
   (m)[ 0] = (min)+(s*rand());                  \
   (m)[ 1] = (min)+(s*rand());                  \
   (m)[ 2] = (min)+(s*rand());                  \
   (m)[ 3] = (min)+(s*rand());                  \
   (m)[ 4] = (min)+(s*rand());                  \
   (m)[ 5] = (min)+(s*rand());                  \
   (m)[ 6] = (min)+(s*rand());                  \
   (m)[ 7] = (min)+(s*rand());                  \
   (m)[ 8] = (min)+(s*rand());                  \
   (m)[ 9] = (min)+(s*rand());                  \
   (m)[10] = (min)+(s*rand());                  \
   (m)[11] = (min)+(s*rand());                  \
   (m)[12] = (min)+(s*rand());                  \
   (m)[13] = (min)+(s*rand());                  \
   (m)[14] = (min)+(s*rand());                  \
   (m)[15] = (min)+(s*rand());                  \
}

//-----------------------------------------------------------------------------------------------

#define M44_TRANSLATE(m,x,y,z)              \
{                                           \
   M44_SET(m,1.0, 0.0, 0.0, (x),            \
             0.0, 1.0, 0.0, (y),            \
             0.0, 0.0, 1.0, (z),            \
             0.0, 0.0, 0.0, 1.0 );          \
}

//-----------------------------------------------------------------------------------------------

#define M44_SCALE(m,x,y,z)                  \
{                                           \
   M44_SET(m,(x), 0.0, 0.0, 0.0,            \
             0.0, (y), 0.0, 0.0,            \
             0.0, 0.0, (z), 0.0,            \
             0.0, 0.0, 0.0, 1.0  );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_DIAG(m,x,y,z)                   \
{                                           \
   M44_SET(m,(x), 0.0, 0.0, 0.0,            \
             0.0, (y), 0.0, 0.0,            \
             0.0, 0.0, (z), 0.0,            \
             0.0, 0.0, 0.0, 1.0  );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_ROT_X(m,rx)                     \
{                                           \
   M44_SET(m,1.0,  0.0  ,   0.0  , 0.0,     \
             0.0,cos(rx),-sin(rx), 0.0,     \
             0.0,sin(rx), cos(rx), 0.0,     \
             0.0,  0.0  ,   0.0  , 1.0  );  \
}

//-----------------------------------------------------------------------------------------------

#define M44_ROT_Y(m,ry)                     \
{                                           \
   M44_SET(m, cos(ry),0.0,sin(ry), 0.0,     \
                0.0  ,1.0,  0.0  , 0.0,     \
             -sin(ry),0.0,cos(ry), 0.0,     \
                0.0  ,0.0,  0.0  , 1.0  );  \
}

//-----------------------------------------------------------------------------------------------

#define M44_ROT_Z(m,rz)                     \
{                                           \
   M44_SET(m,cos(rz),-sin(rz), 0.0, 0.0,    \
             sin(rz), cos(rz), 0.0, 0.0,    \
               0.0  ,   0.0  , 1.0, 0.0,    \
               0.0  ,   0.0  , 0.0, 1.0  ); \
}

//-----------------------------------------------------------------------------------------------

#define M44_FLIP_H(a,b)                     \
{                                           \
   M44_SET(a,b[ 3],b[ 2],b[ 1],b[ 0],       \
             b[ 7],b[ 6],b[ 5],b[ 4],       \
             b[11],b[10],b[ 9],b[ 8],       \
             b[15],b[14],b[13],b[12]     ); \
}

//-----------------------------------------------------------------------------------------------

#define M44_FLIP_V(a,b)                     \
{                                           \
   M44_SET(a,b[12],b[13],b[14],b[15],       \
             b[ 8],b[ 9],b[10],b[11],       \
             b[ 4],b[ 5],b[ 6],b[ 7],       \
             b[ 0],b[ 1],b[ 2],b[ 3]     ); \
}

//-----------------------------------------------------------------------------------------------
// Use Rich Cook's VTK plotting convention:
// R = Rx(a) Ry(b) Rz(c) where a, b, and c are three angles (radians)
//-----------------------------------------------------------------------------------------------

#define M44_EULER(m,a,b,c)                  \
{                                           \
   real8 ca=cos(a), sa=sin(a);              \
   real8 cb=cos(b), sb=sin(b);              \
   real8 cc=cos(c), sc=sin(c);              \
                                            \
   (m)[ 0] =  cb*cc;                        \
   (m)[ 1] = -cb*sc;                        \
   (m)[ 2] =  sb;                           \
   (m)[ 3] =   0.0;                         \
   (m)[ 4] =  sa*sb*cc + ca*sc;             \
   (m)[ 5] = -sa*sb*sc + ca*cc;             \
   (m)[ 6] = -sa*cb;                        \
   (m)[ 7] =   0.0;                         \
   (m)[ 8] = -ca*sb*cc + sa*sc;             \
   (m)[ 9] =  ca*sb*sc + sa*cc;             \
   (m)[10] =  ca*cb;                        \
   (m)[11] =   0.0;                         \
   (m)[12] =   0.0;                         \
   (m)[13] =   0.0;                         \
   (m)[14] =   0.0;                         \
   (m)[15] =   1.0;                         \
}

//-----------------------------------------------------------------------------------------------

#define M44_QUAT(m,qx,qy,qz,qs)               \
{                                             \
   real8 x = (qx);                            \
   real8 y = (qy);                            \
   real8 z = (qz);                            \
   real8 s = (qs);                            \
                                              \
   (m)[ 0] = (s*s) +  (x*x) - (y*y) - (z*z);  \
   (m)[ 1] =  2.0  * ((x*y) + (s*z));         \
   (m)[ 2] =  2.0  * ((x*z) - (s*y));         \
   (m)[ 3] =  0.0;                            \
   (m)[ 4] =  2.0  * ((x*y) - (s*z));         \
   (m)[ 5] = (s*s) -  (x*x) + (y*y) - (z*z);  \
   (m)[ 6] =  2.0  * ((y*z) + (s*x));         \
   (m)[ 7] =  0.0;                            \
   (m)[ 8] =  2.0  * ((x*z) + (s*y));         \
   (m)[ 9] =  2.0  * ((y*z) - (s*x));         \
   (m)[10] = (s*s) -  (x*x) - (y*y) + (z*z);  \
   (m)[11] =  0.0;                            \
   (m)[12] =  0.0;                            \
   (m)[13] =  0.0;                            \
   (m)[14] =  0.0;                            \
   (m)[15] =  1.0;                            \
}

//-----------------------------------------------------------------------------------------------

#define M44_RIGHT_TO_LEFT(m)                \
{                                           \
   M44_SET(m, 1.0, 0.0, 0.0, 0.0,           \
              0.0,-1.0, 0.0, 0.0,           \
              0.0, 0.0, 1.0, 0.0,           \
              0.0, 0.0, 0.0, 1.0 );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_REFLECT_X(m)                    \
{                                           \
   M44_SET(m,-1.0, 0.0, 0.0, 0.0,           \
              0.0, 1.0, 0.0, 0.0,           \
              0.0, 0.0, 1.0, 0.0,           \
              0.0, 0.0, 0.0, 1.0 );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_REFLECT_Y(m)                    \
{                                           \
   M44_SET(m, 1.0, 0.0, 0.0, 0.0,           \
              0.0,-1.0, 0.0, 0.0,           \
              0.0, 0.0, 1.0, 0.0,           \
              0.0, 0.0, 0.0, 1.0 );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_REFLECT_Z(m)                    \
{                                           \
   M44_SET(m, 1.0, 0.0, 0.0, 0.0,           \
              0.0, 1.0, 0.0, 0.0,           \
              0.0, 0.0,-1.0, 0.0,           \
              0.0, 0.0, 0.0, 1.0 );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_ECI_TO_SGI(m)                   \
{                                           \
   M44_SET(m, 1.0, 0.0, 0.0, 0.0,           \
              0.0, 1.0, 0.0, 0.0,           \
              0.0, 0.0,-1.0, 0.0,           \
              0.0, 0.0, 0.0, 1.0 );         \
}

//-----------------------------------------------------------------------------------------------

#define M44_MUL(a,b,c)                                                                        \
{                                                                                             \
   (a)[ 0] = ((b)[ 0]*(c)[ 0]) + ((b)[ 1]*(c)[ 4]) + ((b)[ 2]*(c)[ 8]) + ((b)[ 3]*(c)[12]);   \
   (a)[ 1] = ((b)[ 0]*(c)[ 1]) + ((b)[ 1]*(c)[ 5]) + ((b)[ 2]*(c)[ 9]) + ((b)[ 3]*(c)[13]);   \
   (a)[ 2] = ((b)[ 0]*(c)[ 2]) + ((b)[ 1]*(c)[ 6]) + ((b)[ 2]*(c)[10]) + ((b)[ 3]*(c)[14]);   \
   (a)[ 3] = ((b)[ 0]*(c)[ 3]) + ((b)[ 1]*(c)[ 7]) + ((b)[ 2]*(c)[11]) + ((b)[ 3]*(c)[15]);   \
                                                                                              \
   (a)[ 4] = ((b)[ 4]*(c)[ 0]) + ((b)[ 5]*(c)[ 4]) + ((b)[ 6]*(c)[ 8]) + ((b)[ 7]*(c)[12]);   \
   (a)[ 5] = ((b)[ 4]*(c)[ 1]) + ((b)[ 5]*(c)[ 5]) + ((b)[ 6]*(c)[ 9]) + ((b)[ 7]*(c)[13]);   \
   (a)[ 6] = ((b)[ 4]*(c)[ 2]) + ((b)[ 5]*(c)[ 6]) + ((b)[ 6]*(c)[10]) + ((b)[ 7]*(c)[14]);   \
   (a)[ 7] = ((b)[ 4]*(c)[ 3]) + ((b)[ 5]*(c)[ 7]) + ((b)[ 6]*(c)[11]) + ((b)[ 7]*(c)[15]);   \
                                                                                              \
   (a)[ 8] = ((b)[ 8]*(c)[ 0]) + ((b)[ 9]*(c)[ 4]) + ((b)[10]*(c)[ 8]) + ((b)[11]*(c)[12]);   \
   (a)[ 9] = ((b)[ 8]*(c)[ 1]) + ((b)[ 9]*(c)[ 5]) + ((b)[10]*(c)[ 9]) + ((b)[11]*(c)[13]);   \
   (a)[10] = ((b)[ 8]*(c)[ 2]) + ((b)[ 9]*(c)[ 6]) + ((b)[10]*(c)[10]) + ((b)[11]*(c)[14]);   \
   (a)[11] = ((b)[ 8]*(c)[ 3]) + ((b)[ 9]*(c)[ 7]) + ((b)[10]*(c)[11]) + ((b)[11]*(c)[15]);   \
                                                                                              \
   (a)[12] = ((b)[12]*(c)[ 0]) + ((b)[13]*(c)[ 4]) + ((b)[14]*(c)[ 8]) + ((b)[15]*(c)[12]);   \
   (a)[13] = ((b)[12]*(c)[ 1]) + ((b)[13]*(c)[ 5]) + ((b)[14]*(c)[ 9]) + ((b)[15]*(c)[13]);   \
   (a)[14] = ((b)[12]*(c)[ 2]) + ((b)[13]*(c)[ 6]) + ((b)[14]*(c)[10]) + ((b)[15]*(c)[14]);   \
   (a)[15] = ((b)[12]*(c)[ 3]) + ((b)[13]*(c)[ 7]) + ((b)[14]*(c)[11]) + ((b)[15]*(c)[15]);   \
}

//-----------------------------------------------------------------------------------------------

#define M44_MUL2(a,b)                                                                     \
{                                                                                         \
   real8 _t[16]; memcpy(_t,(a),sizeof(_t));                                               \
   (a)[ 0] = (_t[ 0]*(b)[ 0]) + (_t[ 1]*(b)[ 4]) + (_t[ 2]*(b)[ 8]) + (_t[ 3]*(b)[12]);   \
   (a)[ 1] = (_t[ 0]*(b)[ 1]) + (_t[ 1]*(b)[ 5]) + (_t[ 2]*(b)[ 9]) + (_t[ 3]*(b)[13]);   \
   (a)[ 2] = (_t[ 0]*(b)[ 2]) + (_t[ 1]*(b)[ 6]) + (_t[ 2]*(b)[10]) + (_t[ 3]*(b)[14]);   \
   (a)[ 3] = (_t[ 0]*(b)[ 3]) + (_t[ 1]*(b)[ 7]) + (_t[ 2]*(b)[11]) + (_t[ 3]*(b)[15]);   \
                                                                                          \
   (a)[ 4] = (_t[ 4]*(b)[ 0]) + (_t[ 5]*(b)[ 4]) + (_t[ 6]*(b)[ 8]) + (_t[ 7]*(b)[12]);   \
   (a)[ 5] = (_t[ 4]*(b)[ 1]) + (_t[ 5]*(b)[ 5]) + (_t[ 6]*(b)[ 9]) + (_t[ 7]*(b)[13]);   \
   (a)[ 6] = (_t[ 4]*(b)[ 2]) + (_t[ 5]*(b)[ 6]) + (_t[ 6]*(b)[10]) + (_t[ 7]*(b)[14]);   \
   (a)[ 7] = (_t[ 4]*(b)[ 3]) + (_t[ 5]*(b)[ 7]) + (_t[ 6]*(b)[11]) + (_t[ 7]*(b)[15]);   \
                                                                                          \
   (a)[ 8] = (_t[ 8]*(b)[ 0]) + (_t[ 9]*(b)[ 4]) + (_t[10]*(b)[ 8]) + (_t[11]*(b)[12]);   \
   (a)[ 9] = (_t[ 8]*(b)[ 1]) + (_t[ 9]*(b)[ 5]) + (_t[10]*(b)[ 9]) + (_t[11]*(b)[13]);   \
   (a)[10] = (_t[ 8]*(b)[ 2]) + (_t[ 9]*(b)[ 6]) + (_t[10]*(b)[10]) + (_t[11]*(b)[14]);   \
   (a)[11] = (_t[ 8]*(b)[ 3]) + (_t[ 9]*(b)[ 7]) + (_t[10]*(b)[11]) + (_t[11]*(b)[15]);   \
                                                                                          \
   (a)[12] = (_t[12]*(b)[ 0]) + (_t[13]*(b)[ 4]) + (_t[14]*(b)[ 8]) + (_t[15]*(b)[12]);   \
   (a)[13] = (_t[12]*(b)[ 1]) + (_t[13]*(b)[ 5]) + (_t[14]*(b)[ 9]) + (_t[15]*(b)[13]);   \
   (a)[14] = (_t[12]*(b)[ 2]) + (_t[13]*(b)[ 6]) + (_t[14]*(b)[10]) + (_t[15]*(b)[14]);   \
   (a)[15] = (_t[12]*(b)[ 3]) + (_t[13]*(b)[ 7]) + (_t[14]*(b)[11]) + (_t[15]*(b)[15]);   \
}

//-----------------------------------------------------------------------------------------------

#define M44_MUL_MS(a,b,s)  \
{                          \
   (a)[ 0]=((b)[ 0]*(s));  \
   (a)[ 1]=((b)[ 1]*(s));  \
   (a)[ 2]=((b)[ 2]*(s));  \
   (a)[ 3]=((b)[ 3]*(s));  \
   (a)[ 4]=((b)[ 4]*(s));  \
   (a)[ 5]=((b)[ 5]*(s));  \
   (a)[ 6]=((b)[ 6]*(s));  \
   (a)[ 7]=((b)[ 7]*(s));  \
   (a)[ 8]=((b)[ 8]*(s));  \
   (a)[ 9]=((b)[ 9]*(s));  \
   (a)[10]=((b)[10]*(s));  \
   (a)[11]=((b)[11]*(s));  \
   (a)[12]=((b)[12]*(s));  \
   (a)[13]=((b)[13]*(s));  \
   (a)[14]=((b)[14]*(s));  \
   (a)[15]=((b)[15]*(s));  \
}

//-----------------------------------------------------------------------------------------------

#define M44_MUL_SM(a,s,b)  \
{                          \
   (a)[ 0]=((s)*(b)[ 0]);  \
   (a)[ 1]=((s)*(b)[ 1]);  \
   (a)[ 2]=((s)*(b)[ 2]);  \
   (a)[ 3]=((s)*(b)[ 3]);  \
   (a)[ 4]=((s)*(b)[ 4]);  \
   (a)[ 5]=((s)*(b)[ 5]);  \
   (a)[ 6]=((s)*(b)[ 6]);  \
   (a)[ 7]=((s)*(b)[ 7]);  \
   (a)[ 8]=((s)*(b)[ 8]);  \
   (a)[ 9]=((s)*(b)[ 9]);  \
   (a)[10]=((s)*(b)[10]);  \
   (a)[11]=((s)*(b)[11]);  \
   (a)[12]=((s)*(b)[12]);  \
   (a)[13]=((s)*(b)[13]);  \
   (a)[14]=((s)*(b)[14]);  \
   (a)[15]=((s)*(b)[15]);  \
}

//-----------------------------------------------------------------------------------------------

#define M44_TRANSPOSE(q,p)                          \
{                                                   \
   M44_SET(q, (p)[ 0], (p)[ 4], (p)[ 8], (p)[12],   \
              (p)[ 1], (p)[ 5], (p)[ 9], (p)[13],   \
              (p)[ 2], (p)[ 6], (p)[10], (p)[14],   \
              (p)[ 3], (p)[ 7], (p)[11], (p)[15] ); \
}

//-----------------------------------------------------------------------------------------------

#define M44_NEG(a,b)       \
{                          \
   (a)[ 0]=-((b)[ 0]);     \
   (a)[ 1]=-((b)[ 1]);     \
   (a)[ 2]=-((b)[ 2]);     \
   (a)[ 3]=-((b)[ 3]);     \
   (a)[ 4]=-((b)[ 4]);     \
   (a)[ 5]=-((b)[ 5]);     \
   (a)[ 6]=-((b)[ 6]);     \
   (a)[ 7]=-((b)[ 7]);     \
   (a)[ 8]=-((b)[ 8]);     \
   (a)[ 9]=-((b)[ 9]);     \
   (a)[10]=-((b)[10]);     \
   (a)[11]=-((b)[11]);     \
   (a)[12]=-((b)[12]);     \
   (a)[13]=-((b)[13]);     \
   (a)[14]=-((b)[14]);     \
   (a)[15]=-((b)[15]);     \
}

//-----------------------------------------------------------------------------------------------

#define M44_ABS(a,b)       \
{                          \
   (a)[ 0]=fabs((b)[ 0]);  \
   (a)[ 1]=fabs((b)[ 1]);  \
   (a)[ 2]=fabs((b)[ 2]);  \
   (a)[ 3]=fabs((b)[ 3]);  \
   (a)[ 4]=fabs((b)[ 4]);  \
   (a)[ 5]=fabs((b)[ 5]);  \
   (a)[ 6]=fabs((b)[ 6]);  \
   (a)[ 7]=fabs((b)[ 7]);  \
   (a)[ 8]=fabs((b)[ 8]);  \
   (a)[ 9]=fabs((b)[ 9]);  \
   (a)[10]=fabs((b)[10]);  \
   (a)[11]=fabs((b)[11]);  \
   (a)[12]=fabs((b)[12]);  \
   (a)[13]=fabs((b)[13]);  \
   (a)[14]=fabs((b)[14]);  \
   (a)[15]=fabs((b)[15]);  \
}

//-----------------------------------------------------------------------------------------------

#define M44_RINT(a,b)      \
{                          \
   (a)[ 0]=rint((b)[ 0]);  \
   (a)[ 1]=rint((b)[ 1]);  \
   (a)[ 2]=rint((b)[ 2]);  \
   (a)[ 3]=rint((b)[ 3]);  \
   (a)[ 4]=rint((b)[ 4]);  \
   (a)[ 5]=rint((b)[ 5]);  \
   (a)[ 6]=rint((b)[ 6]);  \
   (a)[ 7]=rint((b)[ 7]);  \
   (a)[ 8]=rint((b)[ 8]);  \
   (a)[ 9]=rint((b)[ 9]);  \
   (a)[10]=rint((b)[10]);  \
   (a)[11]=rint((b)[11]);  \
   (a)[12]=rint((b)[12]);  \
   (a)[13]=rint((b)[13]);  \
   (a)[14]=rint((b)[14]);  \
   (a)[15]=rint((b)[15]);  \
}

//-----------------------------------------------------------------------------------------------

#define M44_SIGN(a,b)    \
{                        \
   (a)[ 0]=( ((b)[ 0]<0.0) ? -1.0 : ( (((b)[ 0]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 1]=( ((b)[ 1]<0.0) ? -1.0 : ( (((b)[ 1]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 2]=( ((b)[ 2]<0.0) ? -1.0 : ( (((b)[ 2]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 3]=( ((b)[ 3]<0.0) ? -1.0 : ( (((b)[ 3]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 4]=( ((b)[ 4]<0.0) ? -1.0 : ( (((b)[ 4]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 5]=( ((b)[ 5]<0.0) ? -1.0 : ( (((b)[ 5]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 6]=( ((b)[ 6]<0.0) ? -1.0 : ( (((b)[ 6]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 7]=( ((b)[ 7]<0.0) ? -1.0 : ( (((b)[ 7]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 8]=( ((b)[ 8]<0.0) ? -1.0 : ( (((b)[ 8]>0.0)) ? +1.0 : 0.0) ); \
   (a)[ 9]=( ((b)[ 9]<0.0) ? -1.0 : ( (((b)[ 9]>0.0)) ? +1.0 : 0.0) ); \
   (a)[10]=( ((b)[10]<0.0) ? -1.0 : ( (((b)[10]>0.0)) ? +1.0 : 0.0) ); \
   (a)[11]=( ((b)[11]<0.0) ? -1.0 : ( (((b)[11]>0.0)) ? +1.0 : 0.0) ); \
   (a)[12]=( ((b)[12]<0.0) ? -1.0 : ( (((b)[12]>0.0)) ? +1.0 : 0.0) ); \
   (a)[13]=( ((b)[13]<0.0) ? -1.0 : ( (((b)[13]>0.0)) ? +1.0 : 0.0) ); \
   (a)[14]=( ((b)[14]<0.0) ? -1.0 : ( (((b)[14]>0.0)) ? +1.0 : 0.0) ); \
   (a)[15]=( ((b)[15]<0.0) ? -1.0 : ( (((b)[15]>0.0)) ? +1.0 : 0.0) ); \
}

//-----------------------------------------------------------------------------------------------

#define M44_NORMALIZE(a,b)                               \
{                                                        \
   real8 s =      fabs((b)[ 0]);                         \
         s = ( (s>fabs((b)[ 1])) ? s : fabs((b)[ 1]) );  \
         s = ( (s>fabs((b)[ 2])) ? s : fabs((b)[ 2]) );  \
         s = ( (s>fabs((b)[ 3])) ? s : fabs((b)[ 3]) );  \
         s = ( (s>fabs((b)[ 4])) ? s : fabs((b)[ 4]) );  \
         s = ( (s>fabs((b)[ 5])) ? s : fabs((b)[ 5]) );  \
         s = ( (s>fabs((b)[ 6])) ? s : fabs((b)[ 6]) );  \
         s = ( (s>fabs((b)[ 7])) ? s : fabs((b)[ 7]) );  \
         s = ( (s>fabs((b)[ 8])) ? s : fabs((b)[ 8]) );  \
         s = ( (s>fabs((b)[ 9])) ? s : fabs((b)[ 9]) );  \
         s = ( (s>fabs((b)[10])) ? s : fabs((b)[10]) );  \
         s = ( (s>fabs((b)[11])) ? s : fabs((b)[11]) );  \
         s = ( (s>fabs((b)[12])) ? s : fabs((b)[12]) );  \
         s = ( (s>fabs((b)[13])) ? s : fabs((b)[13]) );  \
         s = ( (s>fabs((b)[14])) ? s : fabs((b)[14]) );  \
         s = ( (s>fabs((b)[15])) ? s : fabs((b)[15]) );  \
                                                         \
         s = ( (s>0.0) ? 1.0/s : 0.0 );                  \
                                                         \
   (a)[ 0]=s*((b)[ 0]);                                  \
   (a)[ 1]=s*((b)[ 1]);                                  \
   (a)[ 2]=s*((b)[ 2]);                                  \
   (a)[ 3]=s*((b)[ 3]);                                  \
   (a)[ 4]=s*((b)[ 4]);                                  \
   (a)[ 5]=s*((b)[ 5]);                                  \
   (a)[ 6]=s*((b)[ 6]);                                  \
   (a)[ 7]=s*((b)[ 7]);                                  \
   (a)[ 8]=s*((b)[ 8]);                                  \
   (a)[ 9]=s*((b)[ 9]);                                  \
   (a)[10]=s*((b)[10]);                                  \
   (a)[11]=s*((b)[11]);                                  \
   (a)[12]=s*((b)[12]);                                  \
   (a)[13]=s*((b)[13]);                                  \
   (a)[14]=s*((b)[14]);                                  \
   (a)[15]=s*((b)[15]);                                  \
}

//-----------------------------------------------------------------------------------------------

#define V3_M44_V3_MUL(q,m,p)                                       \
{                                                                  \
   real8 _x=(p)[0];                                                \
   real8 _y=(p)[1];                                                \
   real8 _z=(p)[2];                                                \
                                                                   \
   (q)[0] = ((m)[ 0]*_x)+((m)[ 1]*_y)+((m)[ 2]*_z) + ((m)[ 3]);    \
   (q)[1] = ((m)[ 4]*_x)+((m)[ 5]*_y)+((m)[ 6]*_z) + ((m)[ 7]);    \
   (q)[2] = ((m)[ 8]*_x)+((m)[ 9]*_y)+((m)[10]*_z) + ((m)[11]);    \
}

//-----------------------------------------------------------------------------------------------

#define V3_V3_M44_MUL(q,p,m)                                       \
{                                                                  \
   real8 _x=(p)[0];                                                \
   real8 _y=(p)[1];                                                \
   real8 _z=(p)[2];                                                \
                                                                   \
   (q)[0] = (_x*(m)[ 0])+(_y*(m)[ 4])+(_z*(m)[ 8]) + ((m)[12]);    \
   (q)[1] = (_x*(m)[ 1])+(_y*(m)[ 5])+(_z*(m)[ 9]) + ((m)[13]);    \
   (q)[2] = (_x*(m)[ 2])+(_y*(m)[ 6])+(_z*(m)[10]) + ((m)[14]);    \
}

//-----------------------------------------------------------------------------------------------

#define M44_FOR_ALL(fn) { for (int i=0; (i<16); ++i) { fn; } }

//-----------------------------------------------------------------------------------------------

#define  M44_SIN(a,b)               { M44_FOR_ALL( (a)[i]=sin((b)[i]) ) }
#define  M44_COS(a,b)               { M44_FOR_ALL( (a)[i]=cos((b)[i]) ) }
#define  M44_TAN(a,b)               { M44_FOR_ALL( (a)[i]=tan((b)[i]) ) }
#define  M44_LOG(a,b)               { M44_FOR_ALL( (a)[i]=(((b)[i]>0.0) ? log  ((b)[i]) : 0.0) ) }
#define  M44_LOG2(a,b)              { M44_FOR_ALL( (a)[i]=(((b)[i]>0.0) ? log2 ((b)[i]) : 0.0) ) }
#define  M44_LOG10(a,b)             { M44_FOR_ALL( (a)[i]=(((b)[i]>0.0) ? log10((b)[i]) : 0.0) ) }
#define  M44_SQR(a,b)               { M44_FOR_ALL( (a)[i]=(b)[i]*(b)[i] ) }
#define  M44_SQRT(a,b)              { M44_FOR_ALL( (a)[i]=(((b)[i]>0.0) ? sqrt ((b)[i]) : 0.0) ) }

#define  M44_THRESHOLD(a,b,s)       { M44_FOR_ALL( (a)[i]=( (fabs((b)[i])<(s)) ? 0.0    : (b)[i] ) ) }
#define  M44_CAP(a,b,max)           { M44_FOR_ALL( (a)[i]=( ((b)[i]<(max))     ? (b)[i] : (max)  ) ) }
#define  M44_CONSTRAIN(a,b,min,max) { M44_FOR_ALL( (a)[i]=( ((b)[i]<(min))     ? (min)  : ( ((b)[i]<(max)) ? (b)[i] : (max) ) ) ) }

//-----------------------------------------------------------------------------------------------

class Matrix_4x4
{
   public :
      real8  mtx[16];

   public :
       Matrix_4x4(void)                     { M44_ZERO(mtx);       }
       Matrix_4x4(const Matrix_4x4     & m) { M44_COPY(mtx,m.mtx); }

       Matrix_4x4(const unsigned char    s) {          M44_SET1(mtx,s);   }
       Matrix_4x4(const unsigned short   s) {          M44_SET1(mtx,s);   }
       Matrix_4x4(const          short   s) {          M44_SET1(mtx,s);   }
       Matrix_4x4(const unsigned int     s) {          M44_SET1(mtx,s);   }
       Matrix_4x4(const          int     s) {          M44_SET1(mtx,s);   }
       Matrix_4x4(const          real8   s) {          M44_SET1(mtx,s);   }

       Matrix_4x4(const unsigned char   *s) { if (s) { M44_COPY(mtx,s); } }
       Matrix_4x4(const unsigned short  *s) { if (s) { M44_COPY(mtx,s); } }
       Matrix_4x4(const          short  *s) { if (s) { M44_COPY(mtx,s); } }
       Matrix_4x4(const unsigned int    *s) { if (s) { M44_COPY(mtx,s); } }
       Matrix_4x4(const          int    *s) { if (s) { M44_COPY(mtx,s); } }
       Matrix_4x4(const          real8  *s) { if (s) { M44_COPY(mtx,s); } }

       Matrix_4x4(const real8 m00, const real8 m01,
                  const real8 m10, const real8 m11                  ) { M44_SET(mtx,m00,m01,0.0,0.0,
                                                                                    m10,m11,0.0,0.0,
                                                                                    0.0,0.0,1.0,0.0,
                                                                                    0.0,0.0,0.0,1.0); }

       Matrix_4x4(const real8 m00, const real8 m11, const real8 m22,
                  const real8 m12, const real8 m20, const real8 m01 ) { M44_SET_TENSOR(mtx,m00,m11,m22,
                                                                                           m12,m20,m01); }

       Matrix_4x4(const real8 m00, const real8 m01, const real8 m02,
                  const real8 m10, const real8 m11, const real8 m12,
                  const real8 m20, const real8 m21, const real8 m22 ) { M44_SET(mtx,m00,m01,m02,0.0,
                                                                                    m10,m11,m12,0.0,
                                                                                    m20,m21,m22,0.0,
                                                                                    0.0,0.0,0.0,1.0); }

      ~Matrix_4x4() {}

      const Matrix_4x4 & operator =  (const Matrix_4x4     & m) { M44_COPY(mtx,m.mtx); return(*this); }

      const Matrix_4x4 & operator =  (const unsigned char    s) { M44_SET1(mtx,s); return(*this); }
      const Matrix_4x4 & operator =  (const unsigned short   s) { M44_SET1(mtx,s); return(*this); }
      const Matrix_4x4 & operator =  (const          short   s) { M44_SET1(mtx,s); return(*this); }
      const Matrix_4x4 & operator =  (const unsigned int     s) { M44_SET1(mtx,s); return(*this); }
      const Matrix_4x4 & operator =  (const          int     s) { M44_SET1(mtx,s); return(*this); }
      const Matrix_4x4 & operator =  (const          real8   s) { M44_SET1(mtx,s); return(*this); }

      const Matrix_4x4 & operator =  (const unsigned char   *s) { if (s) { M44_COPY(mtx,s); } return(*this); }
      const Matrix_4x4 & operator =  (const unsigned short  *s) { if (s) { M44_COPY(mtx,s); } return(*this); }
      const Matrix_4x4 & operator =  (const          short  *s) { if (s) { M44_COPY(mtx,s); } return(*this); }
      const Matrix_4x4 & operator =  (const unsigned int    *s) { if (s) { M44_COPY(mtx,s); } return(*this); }
      const Matrix_4x4 & operator =  (const          int    *s) { if (s) { M44_COPY(mtx,s); } return(*this); }
      const Matrix_4x4 & operator =  (const          real8  *s) { if (s) { M44_COPY(mtx,s); } return(*this); }

            void         operator += (const Matrix_4x4     & m) { M44_ADD   (mtx,mtx,m.mtx); }
            void         operator += (const real8            s) { M44_ADD_MS(mtx,mtx,s    ); }
            void         operator -= (const Matrix_4x4     & m) { M44_SUB   (mtx,mtx,m.mtx); }
            void         operator -= (const real8            s) { M44_SUB_MS(mtx,mtx,s    ); }
            void         operator *= (const Matrix_4x4     & m) { Matrix_4x4 tmp(*this); M44_MUL(mtx,tmp.mtx,m.mtx); }
            void         operator *= (const real8            s) { M44_MUL_MS(mtx,mtx,s    ); }
            void         operator /= (const real8            s) { real8 x = ( (fabs(s)>0.0) ? 1.0/s : 0.0 ); M44_MUL_MS(mtx,mtx,x); }

            Matrix_4x4   operator +  (const Matrix_4x4     & m) { Matrix_4x4 tmp(*this); tmp+=m; return(tmp); }
            Matrix_4x4   operator +  (const real8            s) { Matrix_4x4 tmp(*this); tmp+=s; return(tmp); }
            Matrix_4x4   operator -  (const Matrix_4x4     & m) { Matrix_4x4 tmp(*this); tmp-=m; return(tmp); }
            Matrix_4x4   operator -  (const real8            s) { Matrix_4x4 tmp(*this); tmp-=s; return(tmp); }
            Matrix_4x4   operator *  (const Matrix_4x4     & m) { Matrix_4x4 tmp, tmp2(*this); M44_MUL(tmp.mtx,tmp2.mtx,m.mtx); return(tmp); }
            Matrix_4x4   operator *  (const real8            s) { Matrix_4x4 tmp(*this); tmp*=s; return(tmp); }

            Matrix_4x4   operator - ()                          { Matrix_4x4 tmp; M44_NEG(tmp.mtx,mtx); return(tmp); }

                         operator  real8  *() const { return ( (real8  *) mtx ); }

      real8 Dot           (const Matrix_4x4 & m) const { real8 s=0.0; M44_DOT(s,mtx,m.mtx); return(s); }

      void  Transpose     (void)                       { Matrix_4x4 tmp(*this); M44_TRANSPOSE(mtx,tmp.mtx); }
      void  Transpose     (const Matrix_4x4 & m )      { Matrix_4x4 tmp(m);     M44_TRANSPOSE(mtx,tmp.mtx); }

      void  Normalize     (void)                       { M44_NORMALIZE(mtx,  mtx); }
      void  Normalize     (const Matrix_4x4 & m )      { M44_NORMALIZE(mtx,m.mtx); }

      real8 Determinant   (void);

      real8 Norm          (void)                       { real8 r0   = fabs(mtx[ 0])+fabs(mtx[ 1])+fabs(mtx[ 2])+fabs(mtx[ 3]);
                                                         real8 r1   = fabs(mtx[ 4])+fabs(mtx[ 5])+fabs(mtx[ 6])+fabs(mtx[ 7]);
                                                         real8 r2   = fabs(mtx[ 8])+fabs(mtx[ 9])+fabs(mtx[10])+fabs(mtx[11]);
                                                         real8 r3   = fabs(mtx[12])+fabs(mtx[13])+fabs(mtx[14])+fabs(mtx[15]);
                                                         real8 norm = ( (r0  >r1) ? r0   : r1 );
                                                               norm = ( (norm>r2) ? norm : r2 );
                                                               norm = ( (norm>r3) ? norm : r3 );
                                                         return(norm);
                                                       }
      void  Inverse       (void);
      void  Inverse       (const Matrix_4x4 & m );

      int   Compare       (const Matrix_4x4 & m, const real8 eps=4.0e-8) const;
      int   Compare       (const real8        s, const real8 eps=4.0e-8) const;
      int   Compare       (const real8       *s, const real8 eps=4.0e-8) const;

      int   Near          (const Matrix_4x4 & m, const real8 eps=4.0e-8) const { return( Compare(m,eps) ? 1 : 0 ); }
      int   Near          (const real8        s, const real8 eps=4.0e-8) const { return( Compare(s,eps) ? 1 : 0 ); }
      int   Near          (const real8       *s, const real8 eps=4.0e-8) const { return( Compare(s,eps) ? 1 : 0 ); }

      int   operator ==   (const Matrix_4x4 & m) const { return( Compare(m) ? 1 : 0 ); }
      int   operator ==   (const real8        s) const { return( Compare(s) ? 1 : 0 ); }
      int   operator ==   (const real8       *s) const { return( Compare(s) ? 1 : 0 ); }

      int   operator !=   (const Matrix_4x4 & m) const { return( Compare(m) ? 0 : 1 ); }
      int   operator !=   (const real8        s) const { return( Compare(s) ? 0 : 1 ); }
      int   operator !=   (const real8       *s) const { return( Compare(s) ? 0 : 1 ); }

      int   operator <    (const Matrix_4x4 & m) const { M44_FOR_ALL( if(mtx[i]>=m.mtx[i]) return(0) )  return(1); }
      int   operator <    (const real8        s) const { M44_FOR_ALL( if(mtx[i]>=s       ) return(0) )  return(1); }
      int   operator <    (const real8       *s) const { if (!s) return(0);
                                                         M44_FOR_ALL( if(mtx[i]>=s[i]    ) return(0) ) return(1); }

      int   operator <=   (const Matrix_4x4 & m) const { M44_FOR_ALL( if(mtx[i]> m.mtx[i]) return(0) ) return(1); }
      int   operator <=   (const real8        s) const { M44_FOR_ALL( if(mtx[i]> s       ) return(0) ) return(1); }
      int   operator <=   (const real8       *s) const { if (!s) return(0);
                                                         M44_FOR_ALL( if(mtx[i]> s[i]    ) return(0) ) return(1); }

      int   operator >    (const Matrix_4x4 & m) const { M44_FOR_ALL( if(mtx[i]<=m.mtx[i]) return(0) ) return(1); }
      int   operator >    (const real8        s) const { M44_FOR_ALL( if(mtx[i]<=s       ) return(0) ) return(1); }
      int   operator >    (const real8       *s) const { if (!s) return(0);
                                                         M44_FOR_ALL( if(mtx[i]<=s[i]    ) return(0) ) return(1); }

      int   operator >=   (const Matrix_4x4 & m) const { M44_FOR_ALL( if(mtx[i]< m.mtx[i]) return(0) ) return(1); }
      int   operator >=   (const real8        s) const { M44_FOR_ALL( if(mtx[i]< s       ) return(0) ) return(1); }
      int   operator >=   (const real8       *s) const { if (!s) return(0);
                                                         M44_FOR_ALL( if(mtx[i]< s[i]    ) return(0) ) return(1); }

      void  Identity      (void) { M44_IDENTITY(mtx); }
      void  Zero          (void) { M44_ZERO    (mtx); }
      void  One           (void) { M44_ONE     (mtx); }
      void  Pascal        (void) { M44_PASCAL  (mtx); }
      void  Hilbert       (void) { M44_HILBERT (mtx); }

      void  Rand          (const real8 min=0.0, const real8 max=1.0) { M44_RAND(mtx,min,max); }

      void  Abs           (void)                 { M44_ABS  (mtx,  mtx); }
      void  Abs           (const Matrix_4x4 & m) { M44_ABS  (mtx,m.mtx); }
      void  Rint          (void)                 { M44_RINT (mtx,  mtx); }
      void  Rint          (const Matrix_4x4 & m) { M44_RINT (mtx,m.mtx); }
      void  Sign          (void)                 { M44_SIGN (mtx,  mtx); }
      void  Sign          (const Matrix_4x4 & m) { M44_SIGN (mtx,m.mtx); }

      void  Sin           (void)                 { M44_SIN  (mtx,  mtx); }
      void  Sin           (const Matrix_4x4 & m) { M44_SIN  (mtx,m.mtx); }
      void  Cos           (void)                 { M44_COS  (mtx,  mtx); }
      void  Cos           (const Matrix_4x4 & m) { M44_COS  (mtx,m.mtx); }
      void  Tan           (void)                 { M44_TAN  (mtx,  mtx); }
      void  Tan           (const Matrix_4x4 & m) { M44_TAN  (mtx,m.mtx); }
      void  Log           (void)                 { M44_LOG  (mtx,  mtx); }
      void  Log           (const Matrix_4x4 & m) { M44_LOG  (mtx,m.mtx); }
      void  Log2          (void)                 { M44_LOG2 (mtx,  mtx); }
      void  Log2          (const Matrix_4x4 & m) { M44_LOG2 (mtx,m.mtx); }
      void  Log10         (void)                 { M44_LOG10(mtx,  mtx); }
      void  Log10         (const Matrix_4x4 & m) { M44_LOG10(mtx,m.mtx); }
      void  Sqr           (void)                 { M44_SQR  (mtx,  mtx); }
      void  Sqr           (const Matrix_4x4 & m) { M44_SQR  (mtx,m.mtx); }
      void  Sqrt          (void)                 { M44_SQRT (mtx,  mtx); }
      void  Sqrt          (const Matrix_4x4 & m) { M44_SQRT (mtx,m.mtx); }

      void  Threshold     (const real8 eps)                                        { M44_THRESHOLD(mtx,  mtx,eps); }
      void  Threshold     (const Matrix_4x4 & m, const real8 eps)                  { M44_THRESHOLD(mtx,m.mtx,eps); }

      void  Cap           (const real8 max)                                        { M44_CAP      (mtx,  mtx,max); }
      void  Cap           (const Matrix_4x4 & m, const real8 max)                  { M44_CAP      (mtx,m.mtx,max); }

      void  Constrain     (const real8 min, const real8 max)                       { M44_CONSTRAIN(mtx,  mtx,min,max); }
      void  Constrain     (const Matrix_4x4 & m, const real8 min, const real8 max) { M44_CONSTRAIN(mtx,m.mtx,min,max); }

      void  Translate     (const real8 tx,
                           const real8 ty,
                           const real8 tz) { M44_TRANSLATE(mtx,tx,ty,tz); }

      void  Scale         (const real8 sx, const real8 sy, const real8 sz)         { M44_SCALE   (mtx,sx,sy,sz); }
      void  Diag          (const real8 sx, const real8 sy, const real8 sz)         { M44_DIAG    (mtx,sx,sy,sz); }

      void  Rotate_X      (const real8 rx) { M44_ROT_X(mtx,rx); }
      void  Rotate_Y      (const real8 ry) { M44_ROT_Y(mtx,ry); }
      void  Rotate_Z      (const real8 rz) { M44_ROT_Z(mtx,rz); }

      void  Flip_H        (void)                  { real8 tmp[16];  M44_COPY(tmp,  mtx); M44_FLIP_H(mtx,tmp); }
      void  Flip_H        (const Matrix_4x4 & m)  { real8 tmp[16];  M44_COPY(tmp,m.mtx); M44_FLIP_H(mtx,tmp); }
      void  Flip_V        (void)                  { real8 tmp[16];  M44_COPY(tmp,  mtx); M44_FLIP_V(mtx,tmp); }
      void  Flip_V        (const Matrix_4x4 & m)  { real8 tmp[16];  M44_COPY(tmp,m.mtx); M44_FLIP_V(mtx,tmp); }

      void  Euler         (const real8 a ,
                           const real8 b ,
                           const real8 c ) { M44_EULER(mtx,a,b,c); }

      void  Quat          (const real8 qx ,
                           const real8 qy ,
                           const real8 qz ,
                           const real8 qs ) { M44_QUAT(mtx,qx,qy,qz,qs); }

      void  Right_To_Left (void)           { M44_RIGHT_TO_LEFT(mtx); }
      void  Reflect_X     (void)           { M44_REFLECT_X    (mtx); }
      void  Reflect_Y     (void)           { M44_REFLECT_Y    (mtx); }
      void  Reflect_Z     (void)           { M44_REFLECT_Z    (mtx); }
      void  ECI_To_SGI    (void)           { M44_ECI_TO_SGI   (mtx); }

      void  Transform_M44_V3N (real8 *v ,            const int n) const;
      void  Transform_V3N_M44 (real8 *v ,            const int n) const;
      void  Transform_M44_V3N (real8 *va, real8 *vb, const int n) const;
      void  Transform_V3N_M44 (real8 *va, real8 *vb, const int n) const;

      void  Print         (FILE *fd=stdout, const char *fmt="%8.4lf ") const;
};

//-----------------------------------------------------------------------------------------------

extern void M44_INV   (M44 ma, const M44   mb);

extern int  M44_Near  (M44 ma, const M44   mb);
extern int  M44_Near  (M44 ma, const M44   mb, const real8 eps);
extern int  M44_Near  (M44 m , const real8 b , const real8 eps);

extern int  M44_Near  (M44 m ,        const real8 m00, const real8 m01, const real8 m02, const real8 m03,
                                      const real8 m10, const real8 m11, const real8 m12, const real8 m13,
                                      const real8 m20, const real8 m21, const real8 m22, const real8 m23,
                                      const real8 m30, const real8 m31, const real8 m32, const real8 m33, const real8 eps );

extern int  M44_Near  (real8 m[4][4], const real8 m00, const real8 m01, const real8 m02, const real8 m03,
                                      const real8 m10, const real8 m11, const real8 m12, const real8 m13,
                                      const real8 m20, const real8 m21, const real8 m22, const real8 m23,
                                      const real8 m30, const real8 m31, const real8 m32, const real8 m33, const real8 eps);

extern void M44_Print (const M44 m, const char *title);

//-----------------------------------------------------------------------------------------------

#endif
